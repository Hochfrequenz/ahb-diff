[tox]
envlist =
    tests
    linting
    coverage
    type_check
skip_missing_interpreters = True
skipsdist = True

[testenv]
commands = python -m pip install --upgrade pip

[testenv:tests]
# the tests environment is called by the Github action that runs the unit tests
deps =
    -r requirements.txt
    .[tests]
setenv = PYTHONPATH = {toxinidir}/ahb_diff
commands = python -m pytest --basetemp={envtmpdir} {posargs}

[testenv:linting]
# the linting environment is called by the Github Action that runs the linter
deps =
    {[testenv:tests]deps}
    .[linting]
    # add your fixtures like e.g. pytest_datafiles here
setenv = PYTHONPATH = {toxinidir}/ahb_diff
commands =
    pylint ahb_diff
    pylint unittests --rcfile=unittests/.pylintrc
    # add single files (ending with .py) or packages here

[testenv:type_check]
# the type_check environment checks the type hints using mypy
setenv = PYTHONPATH = {toxinidir}/ahb_diff
deps =
    {[testenv:tests]deps}
    .[type_check]
commands =
    mypy --show-error-codes ahb_diff --strict
    mypy --show-error-codes unittests --strict
    # add single files (ending with .py) or packages here

[testenv:spell_check]
# the spellcheck environment checks the code for typos
setenv = PYTHONPATH = {toxinidir}/ahb_diff
deps =
    -r requirements.txt
    .[spell_check]
commands =
    codespell --ignore-words=domain-specific-terms.txt ahb_diff
    codespell --ignore-words=domain-specific-terms.txt README.md
    # add single files (ending with .py) or packages here

[testenv:coverage]
# the coverage environment is called by the Github Action that runs the coverage measurement
changedir = unittests
deps =
    {[testenv:tests]deps}
    .[coverage]
setenv = PYTHONPATH = {toxinidir}/ahb_diff
commands =
    coverage run -m pytest --basetemp={envtmpdir} {posargs}
    coverage html --omit .tox/*,unittests/*
    coverage report --fail-under 80 --omit .tox/*,unittests/*

[testenv:compile_requirements]
deps =
    pip-compile-multi
commands =
    pip-compile-multi -d dev_requirements --autoresolve

[testenv:dev]
# the dev environment contains everything you need to start developing on your local machine.
deps =
    {[testenv:tests]deps}
    {[testenv:linting]deps}
    {[testenv:type_check]deps}
    {[testenv:coverage]deps}
    {[testenv:spell_check]deps}
    .[formatting]
    .[dev]
commands =
    python -m pip install --upgrade pip
    pip install -r requirements.txt
